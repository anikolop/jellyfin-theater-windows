<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:themecontrols="clr-namespace:MediaBrowser.Plugins.DefaultTheme.Controls"
                    xmlns:ee="http://schemas.microsoft.com/expression/2010/effects"
                    xmlns:viewModels="clr-namespace:MediaBrowser.Theater.Presentation.ViewModels;assembly=MediaBrowser.Theater.Presentation"
                    xmlns:controls="clr-namespace:MediaBrowser.Theater.Presentation.Controls;assembly=MediaBrowser.Theater.Presentation"
                    xmlns:converters="clr-namespace:MediaBrowser.Plugins.DefaultTheme.Converters"
                    xmlns:header="clr-namespace:MediaBrowser.Plugins.DefaultTheme.Header">

    <Style TargetType="Grid" x:Key="WindowBackgroundContent">
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush SpreadMethod="Reflect" ColorInterpolationMode="SRgbLinearInterpolation" StartPoint="0,0" EndPoint="0,1" >
                    <GradientStop Color="#ff000000" Offset="0" />
                    <GradientStop Color="#ff888888" Offset="1" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Grid" x:Key="WindowBackgroundContentDuringPlayback">
        <Setter Property="Opacity" Value=".75"/>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush SpreadMethod="Reflect" ColorInterpolationMode="SRgbLinearInterpolation" StartPoint="0,0" EndPoint="0,1" >
                    <GradientStop Color="#ff000000" Offset="0" />
                    <GradientStop Color="#ff888888" Offset="1" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Default font for text. Themes should override these as needed-->
    <Brush x:Key="DefaultForeground">#ffffff</Brush>

    <!--Default font for small text. Themes should override these as needed-->
    <Brush x:Key="SmallForeground">#ffffff</Brush>

    <!--Default font for h1 headers. Themes should override these as needed-->
    <Brush x:Key="Heading1Foreground">#ffffff</Brush>

    <!--Default font for h2 headers. Themes should override these as needed-->
    <Brush x:Key="Heading2Foreground">#ffffff</Brush>
    <Brush x:Key="Heading3Foreground">#ffffff</Brush>

    <!--Define all the standard converters here in one place-->
    <converters:WatchedVisibilityConverter x:Key="WatchedVisibilityConverter"></converters:WatchedVisibilityConverter>
    <converters:FavoriteVisibilityConverter x:Key="FavoriteVisibilityConverter"></converters:FavoriteVisibilityConverter>
    <converters:LikeVisibilityConverter x:Key="LikeVisibilityConverter"></converters:LikeVisibilityConverter>
    <converters:DislikeVisibilityConverter x:Key="DislikeVisibilityConverter"></converters:DislikeVisibilityConverter>

    <Style TargetType="Image" x:Key="CommunityRatingImage">
        <Setter Property="Stretch" Value="Uniform"/>
        <Setter Property="Height" Value="30" />
    </Style>
    <Style TargetType="Image" x:Key="CommunityRatingImageFull" BasedOn="{StaticResource CommunityRatingImage}">
        <Setter Property="Source" Value="Images/starFull.png" />
    </Style>
    <Style TargetType="Image" x:Key="CommunityRatingImageHalf" BasedOn="{StaticResource CommunityRatingImage}">
        <Setter Property="Source" Value="Images/starHalf.png" />
    </Style>
    <Style TargetType="Image" x:Key="CommunityRatingImageEmpty" BasedOn="{StaticResource CommunityRatingImage}">
        <Setter Property="Source" Value="Images/starEmpty.png" />
    </Style>
    <Style TargetType="Image" x:Key="LikeImage" BasedOn="{StaticResource CommunityRatingImage}">
        <Setter Property="Source" Value="Images/like.png" />
    </Style>
    <Style TargetType="Image" x:Key="DislikeImage" BasedOn="{StaticResource CommunityRatingImage}">
        <Setter Property="Source" Value="Images/dislike.png" />
    </Style>
    <Style TargetType="Image" x:Key="FavoriteImage" BasedOn="{StaticResource CommunityRatingImage}">
        <Setter Property="Source" Value="Images/favorite.png" />
    </Style>

    <Style TargetType="Border" x:Key="MediaInfoSeparator">
        <Setter Property="Height" Value="12" />
        <Setter Property="Width" Value="12" />
        <Setter Property="Background" Value="#cc3333" />
        <Setter Property="Margin" Value="25 7 5 0" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <DataTemplate DataType="{x:Type viewModels:UserDtoViewModel}">
        <themecontrols:UserTile DataContext="{Binding Mode=OneWay}"></themecontrols:UserTile>
    </DataTemplate>

    <!--Item logos. -->
    <Style TargetType="Image" x:Key="ItemLogo">
        <Setter Property="Margin" Value="0 10 0 0"/>
        <Setter Property="MaxHeight" Value="100"/>
        <Setter Property="MaxWidth" Value="700"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Stretch" Value="Uniform"/>
    </Style>

    <!--Override PageContentTemplate-->
    <ControlTemplate x:Key="PageContentTemplate">

        <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Margin="0 10 0 0">

            <Grid.RowDefinitions>
                <RowDefinition Height="auto"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"></ColumnDefinition>
                <ColumnDefinition Width="*"></ColumnDefinition>
            </Grid.ColumnDefinitions>

            <header:PageTitlePanel VerticalAlignment="Top" HorizontalAlignment="Left" Margin="25 0 0 0" Grid.Column="0" Grid.Row="0"></header:PageTitlePanel>

            <header:TopRightPanel Grid.Column="1" Panel.ZIndex="3" Grid.Row="0" VerticalAlignment="Top" HorizontalAlignment="Right" Margin="0 10 30 0"></header:TopRightPanel>

            <!--Add the frame to hold the pages. The UI core expects this to appear somewhere within the template.-->
            <controls:PageContainer x:Name="PageContainer" Grid.Row="1" Grid.ColumnSpan="2"></controls:PageContainer>

        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="NowPlayingOverlayTemplate">
        <themecontrols:NavigationBar x:Name="NavigationBar" VerticalAlignment="Bottom"></themecontrols:NavigationBar>
    </ControlTemplate>

    <DataTemplate x:Key="ItemSpecialFeaturesTemplate" DataType="{x:Type viewModels:SpecialFeatureViewModel}">
        <Grid HorizontalAlignment="Left">

            <Border Width="{Binding Path=ImageWidth}" Height="{Binding Path=ImageHeight}">
                <Border.Background>
                    <LinearGradientBrush SpreadMethod="Reflect" ColorInterpolationMode="SRgbLinearInterpolation" StartPoint="0,0" EndPoint="0,1" >
                        <GradientStop Color="#ff545358" Offset="0" />
                        <GradientStop Color="#ffCBCBCB" Offset="1" />
                    </LinearGradientBrush>
                </Border.Background>
                <Image>
                    <Image.Style>
                        <Style TargetType="{x:Type Image}">
                            <Setter Property="Stretch" Value="Uniform" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=Item.HasPrimaryImage}" Value="True">
                                    <Setter Property="Source" Value="{Binding Path=Image}" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=Item.HasPrimaryImage}" Value="False">
                                    <Setter Property="Source" Value="../Resources/Images/ChapterDefault.png" />
                                    <Setter Property="VerticalAlignment" Value="Top" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>
            </Border>

            <Grid HorizontalAlignment="Stretch" VerticalAlignment="Bottom">
                <Grid.Background>
                    <SolidColorBrush Color="#A6000000"></SolidColorBrush>
                </Grid.Background>
                <StackPanel Orientation="Vertical" Margin="10 5 0 10">
                    <TextBlock Foreground="White" Text="{Binding Path=Item.Name}" Style="{DynamicResource TextBlockStyle}"></TextBlock>
                    <TextBlock Foreground="White" Text="{Binding Path=MinutesString}" Style="{DynamicResource SmallTextBlockStyle}"></TextBlock>
                </StackPanel>
            </Grid>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="ItemPerformersTemplate" DataType="{x:Type viewModels:BaseItemDtoViewModel}">
        <themecontrols:BaseItemTile DataContext="{Binding}"></themecontrols:BaseItemTile>
    </DataTemplate>

    <DataTemplate x:Key="ItemChaptersTemplate" DataType="{x:Type viewModels:ChapterInfoDtoViewModel}">
        <Grid HorizontalAlignment="Left">

            <Border Width="{Binding Path=ImageWidth}" Height="{Binding Path=ImageHeight}">
                <Border.Background>
                    <LinearGradientBrush SpreadMethod="Reflect" ColorInterpolationMode="SRgbLinearInterpolation" StartPoint="0,0" EndPoint="0,1" >
                        <GradientStop Color="#ff545358" Offset="0" />
                        <GradientStop Color="#ffCBCBCB" Offset="1" />
                    </LinearGradientBrush>
                </Border.Background>
                <Image>
                    <Image.Style>
                        <Style TargetType="{x:Type Image}">
                            <Setter Property="Stretch" Value="Uniform" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=Chapter.HasImage}" Value="True">
                                    <Setter Property="Source" Value="{Binding Path=Image}" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=Chapter.HasImage}" Value="False">
                                    <Setter Property="Source" Value="../Resources/Images/ChapterDefault.png" />
                                    <Setter Property="VerticalAlignment" Value="Top" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>
            </Border>

            <Grid HorizontalAlignment="Stretch" VerticalAlignment="Bottom">
                <Grid.Background>
                    <SolidColorBrush Color="#A6000000"></SolidColorBrush>
                </Grid.Background>
                <StackPanel Orientation="Vertical" Margin="10 5 0 10">
                    <TextBlock Foreground="White" Text="{Binding Path=Chapter.Name}" Style="{DynamicResource TextBlockStyle}"></TextBlock>
                    <TextBlock Foreground="White" Text="{Binding Path=TimeString}" Style="{DynamicResource SmallTextBlockStyle}"></TextBlock>
                </StackPanel>
            </Grid>

        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="ItemGalleryTemplate" DataType="{x:Type BitmapImage}">
        <Image Source="{Binding}" Height="297" VerticalAlignment="Center" HorizontalAlignment="Center">

        </Image>
    </DataTemplate>

    <DataTemplate x:Key="ListPageItemTemplate" DataType="{x:Type viewModels:BaseItemDtoViewModel}">
        <themecontrols:BaseItemTile DataContext="{Binding}"></themecontrols:BaseItemTile>
    </DataTemplate>

    <DataTemplate x:Key="ListPageListViewItemTemplate" DataType="{x:Type viewModels:BaseItemDtoViewModel}">
        <themecontrols:BaseItemListViewTile DataContext="{Binding}"></themecontrols:BaseItemListViewTile>
    </DataTemplate>

    <!--List Page ListBox. -->
    <Style TargetType="controls:ExtendedListBox" x:Key="ListPageListBoxStyle" BasedOn="{StaticResource ListBoxStyle}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=DisplayPreferences.ViewType}" Value="{x:Null}">
                <Setter Property="ItemTemplate" Value="{StaticResource ListPageItemTemplate}"></Setter>
                <Setter Property="ItemContainerStyle" Value="{StaticResource AnimatedListBoxItemStyle}"></Setter>
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <controls:VirtualizingWrapPanel ItemHeight="{Binding Path=DisplayPreferences.PrimaryImageHeight,Mode=OneWay}" ItemWidth="{Binding Path=DisplayPreferences.PrimaryImageWidth,Mode=OneWay}" Orientation="{Binding WrapPanelOrientation}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="30 20">
                            </controls:VirtualizingWrapPanel>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=DisplayPreferences.ViewType}" Value="Poster">
                <Setter Property="ItemTemplate" Value="{StaticResource ListPageItemTemplate}"></Setter>
                <Setter Property="ItemContainerStyle" Value="{StaticResource AnimatedListBoxItemStyle}"></Setter>
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <controls:VirtualizingWrapPanel ItemHeight="{Binding Path=DisplayPreferences.PrimaryImageHeight,Mode=OneWay}" ItemWidth="{Binding Path=DisplayPreferences.PrimaryImageWidth,Mode=OneWay}" Orientation="{Binding WrapPanelOrientation}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="30 20">
                            </controls:VirtualizingWrapPanel>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=DisplayPreferences.ViewType}" Value="Thumbstrip">
                <Setter Property="ItemTemplate" Value="{StaticResource ListPageItemTemplate}"></Setter>
                <Setter Property="ItemContainerStyle" Value="{StaticResource AnimatedListBoxItemStyle}"></Setter>
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="50 30 150 30"></VirtualizingStackPanel>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=DisplayPreferences.ViewType}" Value="List">
                <Setter Property="ItemTemplate" Value="{StaticResource ListPageListViewItemTemplate}"></Setter>
                <Setter Property="ItemContainerStyle" Value="{StaticResource HighlightedListBoxItemStyle}"></Setter>
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="30 50 30 150"></VirtualizingStackPanel>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" x:Key="TextButton" BasedOn="{StaticResource ImageButton}">
        <Setter Property="HorizontalAlignment" Value="Left"></Setter>
        <Setter Property="Margin" Value="50 0 50 0"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border" Background="{TemplateBinding Background}" BorderThickness="0 0 0 2" BorderBrush="Transparent">
                        <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="White" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="White" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="Gray" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Opacity" Value=".2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" x:Key="ViewMenuButton" BasedOn="{StaticResource ImageButton}">
        <Setter Property="HorizontalAlignment" Value="Left"></Setter>
        <Setter Property="Margin" Value="0 15 0 0"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border" Background="{TemplateBinding Background}" BorderThickness="2" BorderBrush="Transparent" Padding="0 5 20 5">
                        <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="White" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="White" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="Gray" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Opacity" Value=".2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>